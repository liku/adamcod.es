<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
  <title>Adam Codes</title>
  <link href="http://example.com/"/>
  <link type="application/atom+xml" rel="self" href="http://adamcod.es/atom.xml"/>
  <updated>2012-07-17T17:42:59+01:00</updated>
  <id>http://adamcod.es/</id>
  <author>
    <name>Adam Brett</name>
    <email>adam@adambrett.co.uk</email>
  </author>

  
  <entry>
    <id>http://adamcod.es/2012/07/03/anatomy-of-a-good-commit-message</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/07/03/anatomy-of-a-good-commit-message.html"/>
    <title>Anatomy Of A Good Commit Message</title>
    <published>2012-07-03T00:00:00+01:00</published>
    <updated>2012-07-03T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    <content type="html">&lt;p&gt;The developers at my new job have been using subversion for the last 8 years, and with a few exceptions, huge &lt;em&gt;code-bomb&lt;/em&gt; style commits covering numerous features and changes (and with generic one-line commit messages) seem to have been the norm.  Source control was used primarily for backup (a sin I think many teams are guilty of at one point or another), and wasn’t used to its full potential, so no-one really paid attention to commit messages or the size of commits; after they were written they were never referenced again.&lt;/p&gt;

&lt;p&gt;When I joined the team, they had already researched and seen the benefits of Git and wanted to move as soon as possible. With my advocation and re-iteration of the various benefits management were quickly convinced and the work was scheduled.  I wanted to make sure Git became a useful tool for the whole team and once everything was ready to be moved across, that meant introducing the idea of smaller atomic commits with better (more useful) commit messages.&lt;/p&gt;

&lt;p&gt;There are already a few &lt;a href=&quot;http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html&quot;&gt;good&lt;/a&gt; &lt;a href=&quot;http://lbrandy.com/blog/2009/03/writing-better-commit-messages/&quot;&gt;posts&lt;/a&gt; and &lt;a href=&quot;http://programmers.stackexchange.com/questions/42110/can-you-recommend-a-good-commit-message-template-guidelines-to-enforce-in-the&quot;&gt;discussions&lt;/a&gt; about what makes a good commit message, but they all lack the rigidity that I felt we were going to need to break 8 years of bad habit.  I wanted a system I could present that wasn’t going to be overwhelming to a team of widely varying skill levels, on top of getting used to a new SCM, a new way of working (with feature branches/git flow) and smaller atomic commits.&lt;/p&gt;

&lt;p&gt;Whilst the information already out there is great, it doesn’t provide the copy, paste, and fill-in-the-blanks kind of template I wanted for the junior developers so they didn’t have to think too much about their commit messages (at least until they became more familiar with the new tools and processes), and those already familiar with good commit practices had a rock solid base to work from.&lt;/p&gt;

&lt;h2 id=&quot;template&quot;&gt;Template&lt;/h2&gt;

&lt;p&gt;With that in mind, I compiled the various posts and discussions on commit messages into the following template, the bulk of the template is from &lt;a href=&quot;http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html&quot;&gt;here&lt;/a&gt; with a couple of minor modifications.  It’s &lt;a href=&quot;https://github.com/blog/926-shiny-new-commit-styles&quot;&gt;widely accepted&lt;/a&gt; as the best example of a good commit message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Action: Capitalized, short (50 chars or less) summary

More detailed explanatory text, if necessary.  Wrap it to about 72
characters or so.  In some contexts, the first line is treated as the
subject of an email and the rest of the text as the body.  The blank
line separating the summary from the body is critical; tools like
rebase can get confused if you run the two together.

Write your commit message in the present tense: &quot;Fix bug&quot; and not &quot;Fixed
bug.&quot;  This convention matches up with commit messages generated by
commands like git merge and git revert.

Further paragraphs come after blank lines.

- Bullet points are okay, too

- Typically a hyphen or asterisk is used for the bullet, preceded by a
  single space, with blank lines in between, but conventions vary here

- Use a hanging indent

Relation: #issue
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;rules&quot;&gt;Rules&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The body of a commit is mandatory.  You should explain to those who might be looking back over your code why you did what you did in this commit.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Commits should be atomic.  That is, a single unit of functionality that can be applied or reverted in its entirety.  Commits should not include changes across functionality.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The first word of the summary should be one of:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Add&lt;/li&gt;
      &lt;li&gt;Modify&lt;/li&gt;
      &lt;li&gt;Re-factor&lt;/li&gt;
      &lt;li&gt;Fix&lt;/li&gt;
      &lt;li&gt;Remove&lt;/li&gt;
      &lt;li&gt;Tidy&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;And should accurately describe what you’re doing with this commit.  If you’re doing more than one of these actions in a commit, you should probably consider breaking them into smaller commits.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The last line of the description should be one of the following statuses, followed by a hash (#) and the issue number from the tracker, if relevant:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Fixes&lt;/li&gt;
      &lt;li&gt;Closes&lt;/li&gt;
      &lt;li&gt;References&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Your keywords may vary, but in our issue tracker &lt;em&gt;fixes&lt;/em&gt; and &lt;em&gt;closes&lt;/em&gt; are keywords that will assign statuses to an issue, &lt;em&gt;references&lt;/em&gt; doesn’t do anything, but including the issue number with a # will link the commit to that issue, so it’s nice to know that you’re just putting it in there to reference the issue.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These rules haven’t been in use very long, and aren’t set in stone.  As time goes on we might find ourselves relaxing them, adding to them, or changing them all together.  As a base to work from they pretty solid right now and should stand us in good stead for the foreseeable future.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2012/06/29/welcome-to-the-first-post</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/06/29/welcome-to-the-first-post.html"/>
    <title>The lorem ipsum</title>
    <published>2012-06-29T00:00:00+01:00</published>
    <updated>2012-06-29T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    <content type="html">&lt;p&gt;Hello, this is a test.&lt;/p&gt;

&lt;p&gt;Ever since I got my first low spec VPS I’ve been interested in finding more efficient ways of using those resources.  I’ve looked at all sorts of caching and server tweaks aimed as consuming less resources and had some successes, and quite a lot of failures, so when I first came across the jekyll blogging engine a few years ago &lt;em&gt;it just made sense&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Ever since then I’ve wanted to try using it, but for one reason or another never got around to it.  Now that’s going to change, this is my first foray into blogging with jekyll, and I’m going to see how it goes.  Stay tuned.&lt;/p&gt;
</content>
  </entry>
  
 
</feed>
